用数组结构实现大小固定的队列和栈

public static class ArrayStack{
  private Integer[] arr;
  private Interger index;
  
  public ArrayStack(int initSize){
    if(initSize < 0){
      throw new IllegalArgumentException("The init size is less than 0");
    }
    arr = new Integer[initSize];
    index = 0;
  }
  
  public Integer peek(){ //输出最后一个数  
    if(index == 0){
      return null;
    }
    return arr[index -1];
  }
  
  public void push(int obj){
    if(index == initSize){
      throw new IllegalArgumentException("full");
    }  
    arr[index] = obj;
    index ++;
  }
  
  public Integer pop(){
    if(index == 0){
      throw new IllegalArgumentException("empty");
    } 
    }
    return arr[--index];
  }
}


//


public static class ArrayQueuen{

private Integer[] arr;
private Integer size;
private Integer start;
private Integer end;

public ArrayQueuen(int initSize)
    if(initSize < 0){
      throw new IllegalArgumentException("The init size is less than 0");
    }
   arr = new Integer[initSize]{
   size = 0;    //数组内数的个数
   start = 0;   //开始弹出的位置
   end = 0;     //开始写入的位置
    }
  public Integer peek(){//输出第一个数
     if(size == 0){
     return null;
     }
     ruturn arr[start];
    }
   public void push(int obj){
    if(size == arr.length){
    throw new ArrayIndexOutofBoundsException("full");
    }
    arr[end] = obj;
    size ++;
    end = end == arr.length ? 0 : end + 1;
   }
   public Integer pop(){
   if(size == 0){
   return null;
   }
   return arr[start];
   start = start == arr.length ? 0 : start + 1;
   size --;
   }

}
