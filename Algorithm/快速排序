 空间复杂度：最好情况： o(logn)
           最差情况:  o(n)
 
 对于一个数组，在它的左侧创建一个小于区，用于
 从这个数组的第一个数开始，和数组的最后一个目标数做比较：
 当遇到比目标数小的数时，将此数和小于区右边第一个数交换，同时，小于区向右扩一位；
 当次数大时，不进行其他操作，仅向后继续遍历。
 
 经典快排code
 public static void partition(int[] arr, int L, int R){
  int less = L - 1;
  int more = R;
  
  while(L < more){
  
    if(arr[L] < arr[R]){
    swap(arr, ++less, L);
    }
    
    else if(arr[L] > arr[R]){
    swap(arr, --more, L);
    }
    else{
    L++;
    }
  }
  swap(arr, more, R);
  
 return new int[]{less + 1, more};
 }
 
 随机快排code
 
 public static void quickSort(int[] arr, int L, int R){
  if(L < R){
    swap(arr, L + (int)(math.radom()*(R -L + 1), R);
    int[] p = partition(arr, L, R);
    quickSort(arr, L, p[0] - 1);
    quickSort(arr, p[1] + 1, R);
  }
 }
