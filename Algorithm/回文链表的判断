判断回文链表：
有三个方法，对应空间复杂度最小的，算法越复杂
1.将链表a押入一个新的栈 b中，再从b栈中取出数，和a比较。空间o（n） 
2.快慢指针，快指针走完，慢指针到达中点，慢指针的右半部分押入栈中，再进行方法1中的比较。o（n）
3.快慢指针，快指针走完，慢指针到达中点，慢指针后面的部分逆序，o（1）
  结束后，需要将链表调回原来状态。 
 code
public class IsPalindromeList {

	public static class Node {
		public int value;
		public Node next;

		public Node(int data) {
			this.value = data;
		}
	}

	// need o(n) extra space
	public static boolean isPalindrome1(Node head) {
		Stack<Node> stack = new Stack<Node>();
		Node cur = head;
		while (cur != null) {
			stack.push(cur);
			cur = cur.next;
		}
		while (head != null) {
			if (head.value != stack.pop().value) {
				return false;
			}
			head = head.next;
		}
		return true;
	}

	// need n/2 extra space
 public static boolean ispalindrome2(Node head){
  if(head == null || head.next == null){//只有0或1个数。
    return true;
  }
  Node right = head.next;
  Node cur = head;
  while(currr.next != null && cur.next.next != null){
    right = right.next;//慢
    cur = cur.next.next;//快
  ]
  Stack<Node> stack = new Stack<Node>();
  while(!stack.isEmpty()){
    if(head.value != stack.pop().value){
      return false;
    }
   head = head.next;
   }
   return true;
  }
  
  //o(1)的空间复杂度。不建立新的栈，只将后半段的链表逆序。
  
  public static boolean isPalindromeList(Node head){
    if(head == null || head.next == null){
      return true;
    }
    Node n1 = head;
    Node n2 = head;
    while(n2.next != null && n2.next.next != null){
      n1 = n1.next;//慢
      n2 = n2.next;//快
    }
    //此时快指针n2到末尾，n1慢指针到中间；
    n2 = n1.next;//n2为右侧第一个指针
    n1.next = null;//切断n1向右的next
    n3 = null;
    
    //开始对后半部分逆序
    while(n2 != null){//这个循环遍历后，n2达到链表最后一个的空位置，n2 = null；所以，此时的n1为右侧最后一个，n1为右侧头节点。
    	n3 = n2.next;
	n2.next = n1;
	//开始向后移动一位
	n1 = n2;
	n2 = n3;
    }
    n3 = n1;//n3 -> save last node,用于后面的恢复过程
    n2 = head;//将n2定义为左侧的头节点
    
    boolean res = true;
    while(n1 != null|| n2 != null){
      if(n1.value != n2.value){
        res = false;
      }
      n1 = n1.next;//从右侧到中间
      n2 = n2.next;//从左侧到中间
      }
      //接下来，需要将链表恢复成原来的样子
      n1 = n3.next;//找到顺序的下一个点,作为中间的核心操作结点
      n3.next = null;//再将顺序的下一个结点切断
      
      while(n1 != null){//向前遍历，直到n1 = null;
       n2 = n1.next;//储存中间结点的下一个
       n1.next = n3;//改变方向
       
       //开始移位
       
       n3 = n1;
       n1= n2;
      }
      
      return res;
     }

   }
  
  }

  
}
