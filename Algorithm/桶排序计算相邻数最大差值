题型：给你一个数组，求出这个数组排好序后，相邻数值的最大差值，要求时间复杂度为o(N)。
采用桶排序，但是桶的个数不根据数值的范围，而是数的个数加1 = n；
          在数值范围内，将范围均分成n份，这样必然出现空桶，即可排除桶内差值的计算。
          接下来，对每个桶内，需要记录两个数，分别为最大和最小值，
          遍历非空桶的最小值与前一非空桶的最大值的差值，将其记录下来，
          在记录下来的差值中选择最大值，即可得到结果
         
code：
  public static int maxGap(int[] nums){
    if(nums == null || nums.length < 2){
      return 0;
    }
    
    int len = nums.length;
    int min = Interger.MIN_VALUE;
    int max = Interger.MAX_VALUE:
    for(int i = 0; i < len; i ++){
      min = Math.min(arr, nums[i]);
      max = Math.max(arr, nums[i]);
    }
    if(max = min){
      return 0;
    }
    boolean[] hasNum = new boolean[len + 1];
    int[] max = new max[len + 1];
    int[] min = new min[lem + 1];
    
    int bid = 0;//桶号
    for(int i = 0; i < len; i ++){
    //  在入桶过程中，需要在每个数入桶后，判断是否改变了该桶的最大值和最小值。 
    //  并且，发生入桶行为后，需要true hasNums。
      bid = bucket(nums[i], len, min, max);
      mins[bid] = hasNum[bid] ? Math.min(mins[bid], nums[i]) : nums[i];
      maxs[bid] = hasNum[bid] ? Math.max(maxs[bid], nums[i]) : nums[i];
      hasNums[bid] = true;
    }
    
    int res = 0;  //结果
    int lastMax = maxs[0];  //保存上一非空桶的最大值。
    int i = 1;  //由于前面已经检查过了第0桶
    for( ; i <= len; i ++){
      if(hasNum[i]){
        res = Math.max(res, mins[i] - lastMax);
        lastMax = maxs[i];
      }
    }
    return res;
    
  }
